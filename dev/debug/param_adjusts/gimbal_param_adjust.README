
文本说明：
        由于matlab调参工具可发出的指令格式固定，想用matlab调参需要将调参对象的控制指令塞入matlab调参工具的指令格式；
        此文本总结了所有matlab调参工具 云台调参 的指令以及使用规范，以便套用
        不同测试对象的内部结构不尽相同，编写调参文件时还需基于测试对象做修改

固定头文件：
    #include "ch.hpp"
    #include "hal.h"
    #include "led.h"
    #include "serial_shell.h"
    #include "can_interface.h"
    #include "common_macro.h"
    #include "buzzer.h"

测试对象头文件以及其他所需的头文件：
    #include "xxx.h"

使用 chibios_rt 命名空间：
    using namespace chibios_rt;

CAN交互界面申明：
    CANInterface can1(&CAND1);
    // 注意：如果只用了一个CAN2，要把CAN1和CAN2两个都开起来！

测试所需的全局变量（内容自定）：
    unsigned const YAW = Gimbal::YAW;
    unsigned const PITCH = Gimbal::PITCH;
    char MOTOR_CHAR[2] = {'y', 'p'};
    float const MIN_ANGLE[2] = {-170, -45};    // [degree]
    float const MAX_ANGLE[2] = {170, 45};      // [degree]
    float const MAX_VELOCITY[2] = {600, 300};  // absolute maximum, [degree/s]
    int const MAX_CURRENT = 4500;  // [mA]
    bool motor_enabled[2] = {false, false};
    bool enable_a2v_pid = false;
    float target_angle[2] = {0.0, 0.0};
    float target_v[2] = {0.0, 0.0};
    #define GIMBAL_YAW_FRONT_ANGLE_RAW 620
    #define GIMBAL_PITCH_FRONT_ANGLE_RAW 5684
    #define GIMBAL_YAW_ACTUAL_VELOCITY (-MPU6500::angle_speed.y)
    #define GIMBAL_PITCH_ACTUAL_VELOCITY (-MPU6500::angle_speed.x)

调参数据反馈线程时间间隔：
    unsigned const GIMBAL_FEEDBACK_INTERVAL = 25; // [ms]

调参对象运行线程时间间隔（若调试SKD以及更高层的架构则不需要，因为其本身自带线程）：
    unsigned const GIMBAL_THREAD_INTERVAL = 1;    // [ms]

调参数据反馈线程：
    class GimbalFeedbackThread : public chibios_rt::BaseStaticThread<1024> {

    public:

        bool enable_yaw_feedback = false;
        bool enable_pitch_feedback = false;

    private:

        void main() final {

            setName("gimbal_fb");

            while (!shouldTerminate()) {

                if (enable_yaw_feedback) {
                    Shell::printf("!gy,%u,%.2f,%.2f,%.2f,%.2f,%d,%d" SHELL_NEWLINE_STR,
                                  SYSTIME,
                                  Gimbal::feedback[YAW].actual_angle, target_angle[YAW],
                                  GIMBAL_YAW_ACTUAL_VELOCITY, target_v[YAW],
                                  Gimbal::feedback[YAW].actual_current, Gimbal::target_current[YAW]);
                }
                if (enable_pitch_feedback) {
                    Shell::printf("!gp,%u,%.2f,%.2f,%.2f,%.2f,%d,%d" SHELL_NEWLINE_STR,
                                  SYSTIME,
                                  Gimbal::feedback[PITCH].actual_angle, target_angle[PITCH],
                                  GIMBAL_PITCH_ACTUAL_VELOCITY, target_v[PITCH],
                                  Gimbal::feedback[PITCH].actual_current, Gimbal::target_current[PITCH]);
                }

                sleep(TIME_MS2I(GIMBAL_FEEDBACK_INTERVAL));
            }
        }

    } gimbalFeedbackThread;

调参指令：

    1. 电机使能
    static void cmd_gimbal_enable(BaseSequentialStream *chp, int argc, char *argv[]) {
        (void) argv;
        if (argc != 2) {
            shellUsage(chp, "g_enable yaw(0/1) pitch(0/1)");
            return;
        }
        motor_enabled[YAW] = *argv[0] - '0';
        motor_enabled[PITCH] = *argv[1] - '0';
    }

    2. 摩擦轮使能
    static void cmd_gimbal_enable_fw(BaseSequentialStream *chp, int argc, char *argv[]) {
        (void) argv;
        if (argc != 1) {
            shellUsage(chp, "g_enable_fw 0/1");
            return;
        }
        if (*argv[0] == '1') {
            Shoot::set_friction_wheels(0.5);
        } else {
            Shoot::set_friction_wheels_speed(0);
        }
        Shoot::send_gimbal_currents();
    }

    3. 数据反馈使能
    static void cmd_gimbal_enable_feedback(BaseSequentialStream *chp, int argc, char *argv[]) {
        (void) argv;
        if (argc != 2) {
            shellUsage(chp, "g_enable_fb yaw(0/1) pitch(0/1)");
            return;
        }
        gimbalFeedbackThread.enable_yaw_feedback = *argv[0] - '0';
        gimbalFeedbackThread.enable_pitch_feedback = *argv[1] - '0';
    }

    4. 记当前角度位置为原点
    static void cmd_gimbal_fix_front_angle(BaseSequentialStream *chp, int argc, char *argv[]) {
        (void) argv;
        if (argc != 0) {
            shellUsage(chp, "g_fix");
            return;
        }
        Gimbal::feedback[YAW].reset_front_angle();
        Gimbal::feedback[PITCH].reset_front_angle();
    }

    清除速度环PID累积误差（辅助函数）
    void _cmd_gimbal_clear_i_out() {
        for (int i = 0; i < 2; i++) {
            Gimbal::v2i_pid[i].clear_i_out();
            Gimbal::a2v_pid[i].clear_i_out();
        }
    }

    5. 设置目标速度并取消角度环PID调节
    static void cmd_gimbal_set_target_velocities(BaseSequentialStream *chp, int argc, char *argv[]) {
        (void) argv;
        if (argc != 2) {
            shellUsage(chp, "g_set_v yaw_velocity pitch_velocity");
            return;
        }

        target_v[YAW] = Shell::atof(argv[0]);
        target_v[PITCH] = Shell::atof(argv[1]);
        _cmd_gimbal_clear_i_out();

        enable_a2v_pid = false;
    }

    6. 设置目标角度并启用角度环PID调节
    static void cmd_gimbal_set_target_angle(BaseSequentialStream *chp, int argc, char *argv[]) {
        (void) argv;
        if (argc != 2) {
            shellUsage(chp, "g_set_angle yaw_angle pitch_angle");
            return;
        }

        target_angle[YAW] = Shell::atof(argv[0]);
        target_angle[PITCH] = Shell::atof(argv[1]);
        _cmd_gimbal_clear_i_out();

        enable_a2v_pid = true;
    }

    7. 设置PID参数
    void cmd_gimbal_set_parameters(BaseSequentialStream *chp, int argc, char *argv[]) {
        (void) argv;
        if (argc != 7) {
            shellUsage(chp, "g_set_params yaw(0)/pitch(1) angle_to_v(0)/v_to_i(0) ki kp kd i_limit out_limit");
            chprintf(chp, "!pe" SHELL_NEWLINE_STR);  // echo parameters error
            return;
        }

        Gimbal::pid_params_t yaw_a2v_params = Gimbal::a2v_pid[YAW].get_parameters();
        Gimbal::pid_params_t yaw_v2i_params = Gimbal::v2i_pid[YAW].get_parameters();
        Gimbal::pid_params_t pitch_a2v_params = Gimbal::a2v_pid[PITCH].get_parameters();
        Gimbal::pid_params_t pitch_v2i_params = Gimbal::v2i_pid[PITCH].get_parameters();

        Gimbal::pid_params_t *p = nullptr;
        if (*argv[0] == '0' && *argv[1] == '0') p = &yaw_a2v_params;
        else if (*argv[0] == '0' && *argv[1] == '1') p = &yaw_v2i_params;
        else if (*argv[0] == '1' && *argv[1] == '0') p = &pitch_a2v_params;
        else if (*argv[0] == '1' && *argv[1] == '1') p = &pitch_v2i_params;
        else {
            chprintf(chp, "!pe" SHELL_NEWLINE_STR);  // echo parameters error
            return;
        }

        *p = {Shell::atof(argv[2]),
              Shell::atof(argv[3]),
              Shell::atof(argv[4]),
              Shell::atof(argv[5]),
              Shell::atof(argv[6])};

        Gimbal::change_pid_params(yaw_a2v_params, yaw_v2i_params, pitch_a2v_params, pitch_v2i_params);

        chprintf(chp, "!ps" SHELL_NEWLINE_STR); // echo parameters set
    }

    显示PID参数（辅助函数）
    static inline void _cmd_gimbal_echo_parameters(BaseSequentialStream *chp, Gimbal::pid_params_t p) {
        chprintf(chp, "%f %f %f %f %f" SHELL_NEWLINE_STR, p.kp, p.ki, p.kd, p.i_limit, p.out_limit);
    }

    8. 显示全部PID参数
    void cmd_gimbal_echo_parameters(BaseSequentialStream *chp, int argc, char *argv[]) {
        (void) argv;
        if (argc != 0) {
            shellUsage(chp, "g_echo_params");
            return;
        }

        chprintf(chp, "yaw angle_to_v:   ");
        _cmd_gimbal_echo_parameters(chp, Gimbal::a2v_pid[YAW].get_parameters());
        chprintf(chp, "yaw v_to_i:       ");
        _cmd_gimbal_echo_parameters(chp, Gimbal::v2i_pid[YAW].get_parameters());
        chprintf(chp, "pitch angle_to_v: ");
        _cmd_gimbal_echo_parameters(chp, Gimbal::a2v_pid[PITCH].get_parameters());
        chprintf(chp, "pitch v_to_i:     ");
        _cmd_gimbal_echo_parameters(chp, Gimbal::v2i_pid[PITCH].get_parameters());
    }

Shell指令集（所有通过窗口发送的指令名和相对应的函数名都要在此登记）：
    ShellCommand gimbalCotrollerCommands[] = {
            {"g_enable",      cmd_gimbal_enable},
            {"g_enable_fb",   cmd_gimbal_enable_feedback},
            {"g_fix",         cmd_gimbal_fix_front_angle},
            {"g_set_v",       cmd_gimbal_set_target_velocities},
            {"g_set_angle",   cmd_gimbal_set_target_angle},
            {"g_set_params",  cmd_gimbal_set_parameters},
            {"g_echo_params", cmd_gimbal_echo_parameters},
            {"g_enable_fw",   cmd_gimbal_enable_fw},
            {nullptr,         nullptr}
    };

调参对象运行线程（若调试SKD以及更高层的架构则不需要，因为其本身自带线程）：
    class GimbalDebugThread : public BaseStaticThread<1024> {
    protected:
        void main() final {
            setName("gimbal");
            while (!shouldTerminate()) {

                // Calculation and check
                if (motor_enabled[YAW] || motor_enabled[PITCH]) {

                    for (unsigned i = YAW; i <= PITCH; i++) {

                        // Perform angle check
                        if (Gimbal::feedback[i].actual_angle > MAX_ANGLE[i]) {
                            Shell::printf("!d%cA" SHELL_NEWLINE_STR, MOTOR_CHAR[i]);
                            motor_enabled[i] = false;
                            continue;
                        }
                        if (Gimbal::feedback[i].actual_angle < MIN_ANGLE[i]) {
                            Shell::printf("!d%ca" SHELL_NEWLINE_STR, MOTOR_CHAR[i]);
                            motor_enabled[i] = false;
                            continue;
                        }

                        if (enable_a2v_pid) {
                            // Calculate from angle to velocity
                            Gimbal::calc_a2v_((Gimbal::motor_id_t) i, Gimbal::feedback[i].actual_angle, target_angle[i]);
                        } else {
                            // Directly fill the target velocity
                            Gimbal::target_velocity[i] = target_v[i];
                        }

                        // Perform velocity check
                        float actual_velocity_;
                        if (i == YAW) actual_velocity_ = GIMBAL_YAW_ACTUAL_VELOCITY;
                        else actual_velocity_ = GIMBAL_PITCH_ACTUAL_VELOCITY;
                        if (actual_velocity_ > MAX_VELOCITY[i]) {
                            Shell::printf("!d%cv" SHELL_NEWLINE_STR, MOTOR_CHAR[i]);
                            motor_enabled[i] = false;
                            continue;
                        }

                        // Calculate from velocity to current
                        Gimbal::calc_v2i_((Gimbal::motor_id_t) i, actual_velocity_, Gimbal::target_velocity[i]);
                        // NOTE: Gimbal::target_velocity[i] is either calculated or filled (see above)


                        // Perform current check
                        if (Gimbal::target_current[i] > MAX_CURRENT || Gimbal::target_current[i] < -MAX_CURRENT) {
                            Shell::printf("!d%cc" SHELL_NEWLINE_STR, MOTOR_CHAR[i]);
                            motor_enabled[i] = false;
                            continue;
                        }
                    }

                }

                // This two operations should be after calculation since motor can get disabled if check failed
                // This two operations should always perform, instead of being put in a 'else' block
                if (!motor_enabled[YAW]) Gimbal::target_current[YAW] = 0;
                if (!motor_enabled[PITCH]) Gimbal::target_current[PITCH] = 0;

                // Send currents
                GimbalInterface::clip_gimbal_current();

                sleep(TIME_MS2I(GIMBAL_THREAD_INTERVAL));
            }
        }
    } gimbalThread;

调参 main 函数：
    int main(void) {

        halInit();
        System::init();
        LED::allOffX();
        Shell::start(HIGHPRIO);
        Shell::addCommands(gimbalCotrollerCommands);

        can1.start(HIGHPRIO - 1);
        MPU6500::start(HIGHPRIO - 2);
        chThdSleepMilliseconds(10);
        Gimbal::init(&can1, GIMBAL_YAW_FRONT_ANGLE_RAW, GIMBAL_PITCH_FRONT_ANGLE_RAW);

        gimbalFeedbackThread.start(NORMALPRIO - 1);
        gimbalThread.start(NORMALPRIO);

        // See chconf.h for what this #define means.
    #if CH_CFG_NO_IDLE_THREAD
        // ChibiOS idle thread has been disabled,
        // main() should implement infinite loop
        while (true) {}
    #else
        // When main() quits, the main thread will somehow enter an infinite loop, so we set the priority to lowest
        // before quitting, to let other threads run normally
        BaseThread::setPriority(1);
    #endif
        return 0;
    }